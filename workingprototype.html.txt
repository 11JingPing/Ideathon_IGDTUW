
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ctrl Freaks</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #494949;
            color: white;
        }

        .main-bg {
            background-color: #494949;
        }

        .secondary-color-bg {
            background-color: #07CBB8;
        }

        .secondary-color-text {
            color: #07CBB8;
        }

        .text-44 { font-size: 44px; }
        .text-32 { font-size: 32px; }
        .text-28 { font-size: 28px; }
        .text-14 { font-size: 14px; }

        .card {
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 1rem;
            padding: 2rem;
            transition: transform 0.2s;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .chat-btn {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #07CBB8;
            color: #494949;
            border-radius: 9999px;
            padding: 1rem 1.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            z-index: 50;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }
        
        .modal-content {
            background-color: #494949;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            border-radius: 1rem;
            max-width: 600px;
        }

        .close-btn {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close-btn:hover,
        .close-btn:focus {
            color: white;
            text-decoration: none;
            cursor: pointer;
        }

        .underline-hover:hover {
            text-decoration: underline;
        }

        /* Styling for the comments section */
        .comment-card {
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 0.5rem;
            padding: 1rem;
        }
    </style>
</head>
<body class="main-bg text-white">

    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, addDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection, query, where, getDocs, orderBy, limit, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Firebase initialization
        // Global variables provided by the Canvas environment
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

        let db = null;
        let auth = null;
        let userId = null;
        let userAuthReady = false;
        
        if (firebaseConfig) {
            setLogLevel('debug');
            const app = initializeApp(firebaseConfig);
            db = getFirestore(app);
            auth = getAuth(app);
            
            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid;
                } else {
                    try {
                        // Sign in anonymously if no token is available
                        await signInAnonymously(auth);
                        userId = auth.currentUser.uid;
                    } catch (error) {
                        console.error("Error signing in anonymously:", error);
                    }
                }
                userAuthReady = true;
                document.getElementById('user-id').textContent = userId;
                console.log("Firebase initialized and user authenticated:", userId);
                // Call render functions after auth state is ready
                if (window.currentPage === 'home') {
                    renderComments();
                } else if (window.currentPage === 'events') {
                    renderEvents();
                }
            });

            // If a token is provided, sign in with it
            if (initialAuthToken) {
                signInWithCustomToken(auth, initialAuthToken).catch((error) => {
                    console.error("Error signing in with custom token:", error);
                });
            }

            // Make the firebase instances and auth state globally available
            window.db = db;
            window.auth = auth;
            window.getUserId = () => userId;
            window.isAuthReady = () => userAuthReady;
            window.appId = appId;
        } else {
            console.error("Firebase config is missing.");
        }
    </script>
    
    <!-- App state and page rendering logic -->
    <script>
        window.currentPage = 'home';
        
        function navigate(page) {
            window.currentPage = page;
            const pages = ['home', 'simulator', 'learn', 'analyzer', 'events'];
            pages.forEach(p => {
                const element = document.getElementById(`page-${p}`);
                if (element) {
                    element.classList.add('hidden');
                }
            });
            const currentPageElement = document.getElementById(`page-${page}`);
            if (currentPageElement) {
                currentPageElement.classList.remove('hidden');
            }

            // Trigger data rendering for specific pages
            if (page === 'home') {
                renderComments();
            } else if (page === 'events') {
                renderEvents();
            }
        }
    </script>

    <!-- Header and Navigation -->
    <header class="p-6 md:p-8 flex flex-col md:flex-row justify-between items-center text-center">
        <div class="text-44 font-bold secondary-color-text">
            Ctrl Freaks
        </div>
        <nav class="mt-4 md:mt-0">
            <ul class="flex flex-wrap justify-center space-x-4 md:space-x-8 text-28">
                <li><a href="#" onclick="navigate('home')" class="underline-hover">Home</a></li>
                <li><a href="#" onclick="navigate('simulator')" class="underline-hover">Simulator</a></li>
                <li><a href="#" onclick="navigate('learn')" class="underline-hover">Learn</a></li>
                <li><a href="#" onclick="navigate('analyzer')" class="underline-hover">Analyzer</a></li>
                <li><a href="#" onclick="navigate('events')" class="underline-hover">Events & Mentorship</a></li>
            </ul>
        </nav>
    </header>

    <!-- User ID Display -->
    <div class="p-4 text-center text-14">
        User ID: <span id="user-id" class="font-mono text-xs">Loading...</span>
    </div>

    <!-- Main Content Area -->
    <main class="p-4 md:p-8">

        <!-- Home Page -->
        <div id="page-home">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-8">
                <div class="card cursor-pointer" onclick="navigate('simulator')">
                    <h2 class="text-32 font-bold secondary-color-text">Stock Simulator</h2>
                    <p class="text-14 mt-2">Test your trading skills with $100,000 in a risk-free environment.</p>
                </div>
                <div class="card cursor-pointer" onclick="navigate('learn')">
                    <h2 class="text-32 font-bold secondary-color-text">Learn Trading</h2>
                    <p class="text-14 mt-2">Expand your knowledge with financial terms, market insights, and educational videos.</p>
                </div>
                <div class="card cursor-pointer" onclick="navigate('analyzer')">
                    <h2 class="text-32 font-bold secondary-color-text">Risk Analyzer</h2>
                    <p class="text-14 mt-2">Assess the potential risks of a stock before you invest.</p>
                </div>
                <div class="card cursor-pointer" onclick="navigate('events')">
                    <h2 class="text-32 font-bold secondary-color-text">Events & Mentorship</h2>
                    <p class="text-14 mt-2">Connect with a community of traders and learn from the experts.</p>
                </div>
            </div>

            <!-- Comments and Feedback Section -->
            <div class="mt-12 p-8 rounded-xl bg-gray-800">
                <h2 class="text-32 font-bold secondary-color-text mb-4">Comments & Feedback</h2>
                <div id="comments-list" class="space-y-4 max-h-96 overflow-y-auto">
                    <!-- Comments will be dynamically loaded here -->
                    <p id="loading-comments">Loading comments...</p>
                </div>
                <div class="mt-6">
                    <h3 class="text-28 font-bold secondary-color-text mb-2">Leave a Comment</h3>
                    <textarea id="comment-input" class="w-full h-24 p-4 rounded-xl text-black" placeholder="Your feedback matters!"></textarea>
                    <button id="submit-comment-btn" class="secondary-color-bg text-black px-6 py-2 rounded-full font-bold mt-4" onclick="addComment()">Submit Comment</button>
                    <p id="comment-status" class="mt-2 text-14"></p>
                </div>
            </div>
        </div>

        <!-- Stock Simulator Page -->
        <div id="page-simulator" class="hidden">
            <h1 class="text-44 font-bold secondary-color-text mb-6">Stock Simulator</h1>
            <div class="flex flex-col md:flex-row md:space-x-8">
                <div class="w-full md:w-1/2 p-6 card">
                    <h2 class="text-32 font-bold secondary-color-text mb-4">My Portfolio</h2>
                    <p class="text-14">Starting Capital: <span class="text-green-400">$100,000</span></p>
                    <p class="text-14">Current Value: <span id="portfolio-value">$100,000</span></p>
                    <p class="text-14 mt-4">S&P 500 Performance: <span class="text-red-400">-1.5%</span> (Simulated)</p>
                    <div id="portfolio-list" class="mt-4">
                        <!-- Portfolio holdings will be displayed here -->
                    </div>
                </div>
                <div class="w-full md:w-1/2 mt-8 md:mt-0 p-6 card">
                    <h2 class="text-32 font-bold secondary-color-text mb-4">Trade</h2>
                    <div class="flex flex-col space-y-4">
                        <input id="ticker-input" type="text" placeholder="Enter stock ticker (e.g., AAPL)" class="p-4 rounded-xl text-black text-14">
                        <div id="graph-container" class="mt-4 bg-gray-700 rounded-xl p-4 h-64 flex items-center justify-center">
                            <span id="graph-placeholder" class="text-gray-400">Candlestick graph will appear here</span>
                        </div>
                        <input id="quantity-input" type="number" placeholder="Quantity" class="p-4 rounded-xl text-black text-14">
                        <button class="secondary-color-bg text-black px-6 py-2 rounded-full font-bold mt-4" onclick="buyStock()">Buy Stock</button>
                    </div>
                    <p id="trade-status" class="text-14 mt-4"></p>
                </div>
            </div>
        </div>

        <!-- Learn Trading Page -->
        <div id="page-learn" class="hidden">
            <h1 class="text-44 font-bold secondary-color-text mb-6">Learn Trading</h1>
            <div class="flex flex-col md:flex-row md:space-x-8">
                <div class="w-full md:w-2/3 p-6 card">
                    <h2 class="text-32 font-bold secondary-color-text mb-4">Daily Insights</h2>
                    <div class="bg-gray-700 p-4 rounded-xl mb-4">
                        <h3 class="text-28 font-bold">Word of the Day: <span class="secondary-color-text">Arbitrage</span></h3>
                        <p class="text-14 mt-2">The simultaneous purchase and sale of an asset to profit from a difference in the price.</p>
                    </div>
                    <div class="bg-gray-700 p-4 rounded-xl">
                        <h3 class="text-28 font-bold">Stock of the Day: <span class="secondary-color-text">GOOG</span></h3>
                        <p class="text-14 mt-2">Daily Change: <span class="text-green-400">+1.2%</span></p>
                    </div>
                    
                    <h2 class="text-32 font-bold secondary-color-text my-4">Videos</h2>
                    <div class="flex flex-col space-y-4">
                        <div id="video-player" class="bg-gray-700 rounded-xl p-4 h-96 flex items-center justify-center">
                            <span class="text-gray-400">Video playback area</span>
                        </div>
                        <div class="flex">
                            <input id="video-search-input" type="text" placeholder="Search for videos or terms" class="w-full p-4 rounded-l-xl text-black text-14">
                            <button class="bg-gray-700 px-6 rounded-r-xl">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                                </svg>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="w-full md:w-1/3 mt-8 md:mt-0 p-6 card">
                    <h2 class="text-32 font-bold secondary-color-text mb-4">What to Watch</h2>
                    <ul class="space-y-4 text-14">
                        <li class="p-2 rounded-lg bg-gray-700 cursor-pointer underline-hover">Intro to Candlestick Charts</li>
                        <li class="p-2 rounded-lg bg-gray-700 cursor-pointer underline-hover">Understanding Market Volatility</li>
                        <li class="p-2 rounded-lg bg-gray-700 cursor-pointer underline-hover">How to Read an Income Statement</li>
                    </ul>
                </div>
            </div>
        </div>
        
        <!-- Risk Analyzer Page -->
        <div id="page-analyzer" class="hidden">
            <h1 class="text-44 font-bold secondary-color-text mb-6">Risk Analyzer</h1>
            <div class="p-6 card max-w-2xl mx-auto">
                <h2 class="text-32 font-bold secondary-color-text mb-4">Analyze Stock Risk</h2>
                <div class="flex flex-col space-y-4">
                    <input id="analyzer-ticker" type="text" placeholder="Enter stock ticker (e.g., TSLA)" class="p-4 rounded-xl text-black text-14">
                    <input id="maturity-time" type="number" placeholder="Investment period (in months)" class="p-4 rounded-xl text-black text-14">
                    <button class="secondary-color-bg text-black px-6 py-2 rounded-full font-bold" onclick="analyzeRisk()">Analyze Risk</button>
                </div>
                <div id="risk-result" class="mt-8 p-4 rounded-xl bg-gray-700 hidden">
                    <h3 class="text-28 font-bold secondary-color-text mb-2">Analysis Result</h3>
                    <p class="text-14" id="risk-percentage"></p>
                    <p class="text-14 mt-2" id="risk-explanation"></p>
                </div>
            </div>
        </div>

        <!-- Events and Mentorship Page -->
        <div id="page-events" class="hidden">
            <h1 class="text-44 font-bold secondary-color-text mb-6">Events & Mentorship</h1>
            <div class="flex flex-col md:flex-row md:space-x-8">
                <div class="w-full md:w-2/3 p-6 card">
                    <h2 class="text-32 font-bold secondary-color-text mb-4">Events Calendar</h2>
                    <div id="calendar-grid" class="grid grid-cols-7 gap-2 text-center text-14">
                        <!-- Calendar will be generated here -->
                    </div>
                    <div id="event-details-modal" class="modal">
                        <div class="modal-content">
                            <span class="close-btn" onclick="closeModal('event-details-modal')">&times;</span>
                            <h3 class="text-28 font-bold secondary-color-text mb-4">Event Details</h3>
                            <div id="event-content"></div>
                        </div>
                    </div>
                </div>
                <div class="w-full md:w-1/3 mt-8 md:mt-0 p-6 card">
                    <h2 class="text-32 font-bold secondary-color-text mb-4">Mentorship</h2>
                    <p class="text-14">Need personalized guidance? Our one-on-one mentorship sessions can help you navigate the markets with confidence. Sessions are available for a fee.</p>
                    <button class="secondary-color-bg text-black px-6 py-2 rounded-full font-bold mt-4">Book a Session</button>
                </div>
            </div>
        </div>

    </main>

    <!-- Gemini-powered Chatbot (Simulated) -->
    <button class="chat-btn text-28" onclick="openModal('chatbot-modal')">Chatbot</button>

    <div id="chatbot-modal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal('chatbot-modal')">&times;</span>
            <h3 class="text-28 font-bold secondary-color-text mb-4">Ctrl Freaks Chatbot</h3>
            <div class="h-64 overflow-y-auto p-4 bg-gray-800 rounded-xl mb-4">
                <p class="text-14 text-gray-400">Hi! I'm your financial assistant. Ask me to explain a term or give you a quick quiz!</p>
            </div>
            <input type="text" placeholder="Ask a question or start a quiz..." class="w-full p-4 rounded-xl text-black text-14">
            <button class="secondary-color-bg text-black px-6 py-2 rounded-full font-bold mt-4">Send</button>
            <p class="text-14 mt-2 text-red-400">Note: This is a simulated Gemini-powered chatbot.</p>
        </div>
    </div>

    <!-- JavaScript for all page functionalities -->
    <script>
        // UI & Modal functions
        function openModal(modalId) {
            document.getElementById(modalId).style.display = 'block';
        }
        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
            }
        }

        // Home page: Comments & Feedback
        async function renderComments() {
            if (!window.isAuthReady()) {
                console.warn("Auth not ready, skipping renderComments.");
                return;
            }
            const commentsList = document.getElementById('comments-list');
            commentsList.innerHTML = '<p id="loading-comments">Loading comments...</p>';

            const collectionPath = `artifacts/${window.appId}/public/data/comments`;
            const q = query(collection(window.db, collectionPath));

            onSnapshot(q, (snapshot) => {
                commentsList.innerHTML = '';
                if (snapshot.empty) {
                    commentsList.innerHTML = '<p class="text-14 text-gray-400">No comments yet. Be the first!</p>';
                } else {
                    snapshot.forEach(doc => {
                        const commentData = doc.data();
                        const commentElement = document.createElement('div');
                        commentElement.className = 'comment-card';
                        commentElement.innerHTML = `
                            <p class="text-14">${commentData.text}</p>
                            <p class="text-xs text-gray-400 mt-1">
                                By ${commentData.userId.substring(0, 8)}... on 
                                ${commentData.timestamp ? new Date(commentData.timestamp.seconds * 1000).toLocaleDateString() : 'N/A'}
                            </p>
                        `;
                        commentsList.appendChild(commentElement);
                    });
                }
            }, (error) => {
                console.error("Error fetching comments:", error);
                commentsList.innerHTML = '<p class="text-red-400">Failed to load comments.</p>';
            });
        }

        async function addComment() {
            if (!window.isAuthReady() || !window.getUserId()) {
                document.getElementById('comment-status').textContent = 'Please wait for authentication to load.';
                return;
            }
            const commentInput = document.getElementById('comment-input');
            const commentText = commentInput.value.trim();
            const statusMessage = document.getElementById('comment-status');

            if (commentText === "") {
                statusMessage.textContent = 'Comment cannot be empty.';
                statusMessage.classList.remove('text-green-400');
                statusMessage.classList.add('text-red-400');
                return;
            }
            
            try {
                const collectionPath = `artifacts/${window.appId}/public/data/comments`;
                await addDoc(collection(window.db, collectionPath), {
                    text: commentText,
                    userId: window.getUserId(),
                    timestamp: new Date()
                });
                statusMessage.textContent = 'Comment submitted successfully!';
                statusMessage.classList.remove('text-red-400');
                statusMessage.classList.add('text-green-400');
                commentInput.value = '';
            } catch (error) {
                console.error("Error adding comment:", error);
                statusMessage.textContent = 'Failed to submit comment.';
                statusMessage.classList.remove('text-green-400');
                statusMessage.classList.add('text-red-400');
            }
        }
        
        // Stock Simulator Logic (Simulated)
        let portfolio = {
            cash: 100000,
            stocks: {}
        };

        function buyStock() {
            const ticker = document.getElementById('ticker-input').value.trim().toUpperCase();
            const quantity = parseInt(document.getElementById('quantity-input').value);
            const status = document.getElementById('trade-status');
            const graphPlaceholder = document.getElementById('graph-placeholder');

            if (!ticker || !quantity || quantity <= 0) {
                status.textContent = 'Please enter a valid ticker and quantity.';
                status.classList.add('text-red-400');
                return;
            }

            // Simulated stock data for demonstration
            const stockPrice = 150 + Math.random() * 20; // Simulated price
            const cost = stockPrice * quantity;

            if (cost > portfolio.cash) {
                status.textContent = 'Not enough cash to make this trade.';
                status.classList.add('text-red-400');
                return;
            }

            portfolio.cash -= cost;
            if (portfolio.stocks[ticker]) {
                portfolio.stocks[ticker].quantity += quantity;
                portfolio.stocks[ticker].averagePrice = (portfolio.stocks[ticker].averagePrice * (portfolio.stocks[ticker].quantity - quantity) + cost) / portfolio.stocks[ticker].quantity;
            } else {
                portfolio.stocks[ticker] = { quantity: quantity, averagePrice: stockPrice };
            }

            status.textContent = `Successfully bought ${quantity} shares of ${ticker} for $${cost.toFixed(2)}.`;
            status.classList.remove('text-red-400');
            status.classList.add('text-green-400');
            
            updatePortfolioDisplay();
            
            // Show a simulated graph
            graphPlaceholder.innerHTML = `<p class="text-14 text-green-400">Simulated Candlestick Graph for ${ticker}</p>`;
        }

        function updatePortfolioDisplay() {
            let totalValue = portfolio.cash;
            const portfolioList = document.getElementById('portfolio-list');
            portfolioList.innerHTML = '';
            
            for (const ticker in portfolio.stocks) {
                const stock = portfolio.stocks[ticker];
                const currentValue = stock.quantity * (150 + Math.random() * 20); // Simulated live price
                totalValue += currentValue;
                const profit = currentValue - (stock.quantity * stock.averagePrice);
                const profitClass = profit >= 0 ? 'text-green-400' : 'text-red-400';
                
                const stockElement = document.createElement('div');
                stockElement.className = 'mt-2 p-2 rounded-xl bg-gray-700';
                stockElement.innerHTML = `
                    <p class="text-14 font-bold">${ticker}</p>
                    <p class="text-14">Shares: ${stock.quantity}</p>
                    <p class="text-14">Current Value: $${currentValue.toFixed(2)}</p>
                    <p class="text-14">P/L: <span class="${profitClass}">$${profit.toFixed(2)}</span></p>
                `;
                portfolioList.appendChild(stockElement);
            }
            
            document.getElementById('portfolio-value').textContent = `$${totalValue.toFixed(2)}`;
        }
        
        // Risk Analyzer Logic (Simulated)
        function analyzeRisk() {
            const ticker = document.getElementById('analyzer-ticker').value.trim().toUpperCase();
            const maturity = parseInt(document.getElementById('maturity-time').value);
            const resultDiv = document.getElementById('risk-result');
            const percentageText = document.getElementById('risk-percentage');
            const explanationText = document.getElementById('risk-explanation');

            if (!ticker || !maturity || maturity <= 0) {
                percentageText.textContent = 'Please enter a valid stock ticker and investment period.';
                percentageText.classList.add('text-red-400');
                explanationText.textContent = '';
                resultDiv.classList.remove('hidden');
                return;
            }

            // Simulated risk calculation
            let risk = (Math.random() * 50) + 20; // 20% to 70% risk
            if (ticker === 'TSLA' || ticker === 'NVDA') {
                risk += 15; // Higher risk for tech stocks
            }
            if (maturity > 12) {
                risk -= 10; // Lower risk for long-term holds
            }
            risk = Math.min(100, Math.max(0, risk));

            const explanation = risk > 50 
                ? "This stock has a high-risk profile, likely due to market volatility or industry-specific factors. Consider a more conservative approach."
                : "The risk for this stock appears low, suggesting a stable investment. However, always perform your own due diligence.";

            percentageText.textContent = `Calculated Risk: ${risk.toFixed(2)}%`;
            percentageText.className = risk > 50 ? 'text-28 font-bold text-red-400' : 'text-28 font-bold text-green-400';
            explanationText.textContent = explanation;

            resultDiv.classList.remove('hidden');
        }

        // Events and Mentorship Logic
        async function renderEvents() {
            if (!window.isAuthReady()) {
                console.warn("Auth not ready, skipping renderEvents.");
                return;
            }

            const calendarGrid = document.getElementById('calendar-grid');
            calendarGrid.innerHTML = '';
            
            // Add day names
            const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            days.forEach(day => {
                const dayHeader = document.createElement('div');
                dayHeader.className = 'text-center font-bold secondary-color-text p-2';
                dayHeader.textContent = day;
                calendarGrid.appendChild(dayHeader);
            });

            const today = new Date();
            const year = today.getFullYear();
            const month = today.getMonth();
            const firstDayOfMonth = new Date(year, month, 1);
            const lastDayOfMonth = new Date(year, month + 1, 0);
            
            const startingDay = firstDayOfMonth.getDay();
            for (let i = 0; i < startingDay; i++) {
                const emptyCell = document.createElement('div');
                calendarGrid.appendChild(emptyCell);
            }

            for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {
                const dateCell = document.createElement('div');
                dateCell.className = 'p-4 rounded-xl cursor-pointer hover:bg-gray-700 transition-colors duration-200 relative';
                dateCell.innerHTML = `<span class="text-28">${i}</span>`;
                dateCell.dataset.date = `${year}-${month + 1}-${i}`;
                
                if (i === today.getDate()) {
                    dateCell.classList.add('bg-gray-700');
                }

                // Add a visual indicator for an event (simulated)
                if (i % 5 === 0) {
                    const eventDot = document.createElement('div');
                    eventDot.className = 'absolute bottom-2 left-1/2 -translate-x-1/2 w-2 h-2 rounded-full secondary-color-bg';
                    dateCell.appendChild(eventDot);
                }

                dateCell.onclick = (e) => showEventDetails(e.currentTarget.dataset.date);
                calendarGrid.appendChild(dateCell);
            }
        }

        function showEventDetails(date) {
            const eventContent = document.getElementById('event-content');
            eventContent.innerHTML = '';
            
            // Simulated event data based on date
            const events = {
                '2025-9-5': { title: 'Q&A with a Trading Pro', time: '10:00 AM', description: 'Join our expert for a live Q&A session on market strategies.' },
                '2025-9-10': { title: 'Beginners Workshop: How to Buy Your First Stock', time: '2:00 PM', description: 'A guided, step-by-step workshop to help you make your first trade.' },
                '2025-9-15': { title: 'Live Market Analysis', time: '9:30 AM', description: 'Our team analyzes the market open and identifies potential opportunities.' },
                '2025-9-20': { title: 'Community Trading Challenge Kickoff', time: '5:00 PM', description: 'Start the challenge and compete against other traders in the simulator.' },
                '2025-9-25': { title: 'Webinar: Understanding Risk Management', time: '1:00 PM', description: 'Learn how to protect your portfolio from market downturns.' }
            };

            const event = events[date];

            if (event) {
                eventContent.innerHTML = `
                    <h4 class="text-28 font-bold secondary-color-text">${event.title}</h4>
                    <p class="text-14 mt-2">Date: ${date}</p>
                    <p class="text-14">Time: ${event.time}</p>
                    <p class="text-14 mt-4">${event.description}</p>
                    <button class="secondary-color-bg text-black px-6 py-2 rounded-full font-bold mt-4">Book Event</button>
                `;
            } else {
                eventContent.innerHTML = `<p class="text-14 text-gray-400">No events scheduled for this date.</p>`;
            }
            openModal('event-details-modal');
        }
        
        // Initial render
        document.addEventListener('DOMContentLoaded', () => {
            navigate(window.currentPage);
        });
        
    </script>
</body>
</html>
